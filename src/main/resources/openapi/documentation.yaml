openapi: "3.1.0"
info:
  title: "Lagersystem_Backend API"
  description: "Lagersystem_Backend API"
  version: "1.0.0"
paths:
  /:
    get:
      description: ""
      responses:
        "301":
          description: "Moved Permanently <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "/swagger"
  /products:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends List<? extends NetworkProduct>"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Listing every product"
                    data: "null"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductNetworkRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
                Example#2:
                  description: ""
                  value:
                    errorMessage: "Body should be Serialized AddProductNetworkRequest"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Specified space not found"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkProduct"
  /products/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Product not found"
        "200":
          description: "OK <br> ToDo: Error 406 bei Versuch folgendes Response abzuschicken"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkProduct"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Product not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkProduct"
  /spaces:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends List<? extends NetworkSpace>"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Listing every space"
                    data: "null"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddSpaceNetworkRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
                Example#2:
                  description: ""
                  value:
                    errorMessage: "Body should be Serialized AddSpaceNetworkRequest"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Specified storage not found"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkSpace"
  /spaces/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Space not found"
        "200":
          description: "OK <br> ToDo: Error 406 bei Versuch folgendes Response abzuschicken"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkSpace"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Space not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkSpace"
  /storages:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends List<? extends NetworkStorage>"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Listing every storage"
                    data: "null"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddStorageNetworkRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
                Example#2:
                  description: ""
                  value:
                    errorMessage: "Body should be Serialized AddStorageNetworkRequest"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkStorage"
  /storages/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Storage not found"
        "200":
          description: "OK <br> ToDo: Error 406 bei Versuch folgendes Response abzuschicken"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Invalid UUID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errorMessage: "Storage not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends NetworkStorage"
components:
  schemas:
    Success:
      type: "object"
      properties:
        message:
          type: "string"
    Success_? extends List<? extends NetworkProduct>:
      type: "object"
      properties:
        message:
          type: "string"
        data:
          type: "object"
    AddProductNetworkRequest:
      type: "object"
      properties:
        name:
          type: "string"
        price:
          type: "number"
          format: "float"
        description:
          type: "string"
        spaceId:
          type: "string"
      required:
      - "name"
      - "description"
      - "spaceId"
    Error:
      type: "object"
      properties:
        errorMessage:
          type: "string"
      required:
      - "errorMessage"
    Success_? extends NetworkProduct:
      type: "object"
      properties:
        message:
          type: "string"
        data:
          type: "object"
    Success_? extends List<? extends NetworkSpace>:
      type: "object"
      properties:
        message:
          type: "string"
        data:
          type: "object"
    AddSpaceNetworkRequest:
      type: "object"
      properties:
        name:
          type: "string"
        size:
          type: "number"
          format: "float"
        description:
          type: "string"
        storageId:
          type: "string"
      required:
      - "name"
      - "description"
      - "storageId"
    Success_? extends NetworkSpace:
      type: "object"
      properties:
        message:
          type: "string"
        data:
          type: "object"
    Success_? extends List<? extends NetworkStorage>:
      type: "object"
      properties:
        message:
          type: "string"
        data:
          type: "object"
    AddStorageNetworkRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        parentId:
          type: "string"
      required:
      - "name"
      - "description"
    Success_? extends NetworkStorage:
      type: "object"
      properties:
        message:
          type: "string"
        data:
          type: "object"