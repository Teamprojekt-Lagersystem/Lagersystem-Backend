openapi: "3.1.0"
info:
  title: "io_github_Lagersystem_Backend API"
  description: "io_github_Lagersystem_Backend API"
  version: "1.0.0"
paths:
  /:
    get:
      description: ""
      responses:
        "301":
          description: "Moved Permanently <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "/swagger"
  /products:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/NetworkProduct"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductNetworkRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NetworkProduct"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NetworkProduct"
  /products/moveProduct/{id}/{spaceId}:
    patch:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NetworkProduct"
  /spaces:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/NetworkSpace"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddSpaceNetworkRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "201":
          description: "Created"
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveSpaceRequest"
        required: true
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
  /storages:
    get:
      description: ""
      parameters:
      - name: "depth"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Success_? extends List<? extends NetworkStorage>"
              examples:
                Example#1:
                  description: ""
                  value:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddStorageNetworkRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NetworkStorage"
  /storages/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NetworkStorage"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "depth"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Example#1:
                  description: ""
                  value:
                    errors: []
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
components:
  schemas:
    NetworkProduct:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        price:
          type: "number"
          format: "float"
        description:
          type: "string"
        spaceId:
          type: "string"
      required:
      - "id"
      - "name"
      - "description"
      - "spaceId"
    AddProductNetworkRequest:
      type: "object"
      properties:
        name:
          type: "string"
        price:
          type: "number"
          format: "float"
        description:
          type: "string"
        spaceId:
          type: "string"
      required:
      - "name"
      - "description"
      - "spaceId"
    ApiError:
      type: "object"
      properties:
        type:
          type: "string"
        message:
          type: "string"
        context:
          type: "string"
      required:
      - "type"
      - "message"
    Error:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/ApiError"
      required:
      - "errors"
    NetworkSpace:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        size:
          type: "number"
          format: "float"
        description:
          type: "string"
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/NetworkProduct"
        storageId:
          type: "string"
      required:
      - "id"
      - "name"
      - "description"
      - "storageId"
    AddSpaceNetworkRequest:
      type: "object"
      properties:
        name:
          type: "string"
        size:
          type: "number"
          format: "float"
        description:
          type: "string"
        storageId:
          type: "string"
      required:
      - "name"
      - "description"
      - "storageId"
    NetworkStorage:
      type: "object"
      properties:
        id:
          type: "string"
          type: "string"
        spaces:
          type: "array"
          items:
            $ref: "#/components/schemas/NetworkSpace"
        subStorages:
          type: "array"
          items:
            $ref: "#/components/schemas/NetworkStorage"
      required:
      - "id"
      - "name"
      - "description"
      - "spaces"
      - "subStorages"
    AddStorageNetworkRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        parentId:
          type: "string"
      required:
      - "name"
